{
  "item.hexdebug": {
    debugger: "Debugger",
    evaluator: "Evaluator",
  },

  "itemGroup.hexdebug.hexdebug": "HexDebug",

  text: {
    hexdebug: {
      connected: "Debug client connected!",
      no_session: "Debug session is not running.",
      thwack: "Thwack!",
      // Next Iota: [{index}] {iota}
      debugger_stopped: "Next Iota: [%d] %s",
    },

    "autoconfig.hexdebug": {
      title: "HexDebug Config",
      category: {
        client: "Client",
      },
      option: {
        client: {
          openDebugPort: {
            "": "Open Debug Port",
            "@Tooltip": "Whether or not a port should be opened. If false, the Debugger effectively becomes useless.",
          },
          debugPort: {
            "": "Debug Port",
            "@Tooltip": "Port number (1024-65535) to open for the debug client (eg. VSCode) to connect to.",
          },
          smartDebuggerSneakScroll: {
            "": "Smart Debugger Sneak-Scroll",
            "@Tooltip": "If a hex is not currently being debugged and a Debugger is in your main hand, prefer shift-scrolling whatever item is in your offhand (eg. a spellbook).",
          },
          debuggerDisplayMode: {
            "": "Debugger Display Mode",
            "@Tooltip": "\
              Changes when the Debugger should print the next iota to be evaluated.\n\
                DISABLED: Never show Debugger status messages.\n\
                NOT_CONNECTED: Only show Debugger status messages if a debug client is not connected.\n\
                ENABLED: Always show Debugger status messages. (default)",
          },
          showDebugClientLineNumber: {
            "": "Show Debug Client Line Number",
            "@Tooltip": "If true, show the line number (usually 1-indexed) from the debug client (eg. VSCode) in Debugger status messages; otherwise, show the list index (0-indexed)."
          }
        },
      },
    },
  },

  "hexcasting.spell": {
    "hexdebug:": {
      "const/debugging": "Debugger's Reflection",
      "breakpoint/": {
        before: "Set Breakpoint Before",
        after: "Set Breakpoint After"
      },
      "craft/debugger": "Craft Debugger",
    },
    "book.hexdebug:": {},
  },

  hexdebug: {
    tooltip: {
      debugger: {
        step_mode: {
          "": "Mode: %s",
          continue: "Continue",
          over: "Step Over",
          in: "Step In",
          out: "Step Out",
          restart: "Restart",
          stop: "Stop"
        },
      },
    },

    category: {
      items: {
        entry: {
          debugging: {
            "": "Debugging Items",
            page: {
              debugger: "I have read vague descriptions of a strange object used by the ancients to help discover issues in complex _Hexes. I believe I have managed to reproduce this item; I call it the $(l:hexdebug:items/debugging#debugger)$(item)Debugger/$.$(br2)\
                It seems to work in a similar way to $(l:items/hexcasting)$(item)Artifacts/$. However, I can also use it to cast a _Hex right from an item (like a $(l:items/focus)$(item)Focus/$) in my off-hand.$(br2)\
                Unfortunately, the $(l:hexdebug:items/debugging#debugger)$(item)Debugger/$ is not very useful on its own; it seems to require the use of some sort of $(l:https://marketplace.visualstudio.com/items?itemName=object-Object.hex-casting)external tool/$.",
              thwack: "$(italic)Thwack!/$",
              evaluator: "Complementing the $(l:hexdebug:items/debugging#debugger)$(item)Debugger/$, I've also created a new type of staff: the $(l:hexdebug:items/debugging#evaluator)$(item)Evaluator/$.$(br2)\
                While debugging a _Hex, patterns drawn with this staff will be cast using the current stack and $(l:patterns/readwrite#hexcasting:local)$(thing)ravenmind/$ of the $(l:hexdebug:items/debugging#debugger)$(item)Debugger/$.$(br2)\
                Clearing the grid seems to reset the $(l:hexdebug:items/debugging#debugger)$(item)Debugger/$ to just before the first pattern was drawn with the $(l:hexdebug:items/debugging#evaluator)$(item)Evaluator/$. It will not, of course, undo any effects performed by spells on the world.",
              thwonk: "$(italic)Thwonk!/$"
            },
          },
        },
      },

      patterns: {
        entry: {
          debugging: {
            "": "Debugging",
            page: {
              "const/debugging": "Adds $(thing)True/$ to the top of the stack if executed by a $(l:hexdebug:items/debugging#debugger)$(item)Debugger/$, or $(thing)False/$ otherwise.",
              "breakpoint/": {
                before: "Pauses the $(l:hexdebug:items/debugging#debugger)$(item)Debugger/$ before executing this pattern.",
                after: "Pauses the $(l:hexdebug:items/debugging#debugger)$(item)Debugger/$ after executing this pattern (ie. before executing the next pattern).",
              },
              "craft/debugger": "Creates a $(l:hexdebug:items/debugging#debugger)$(item)Debugger/$ that casts a _Hex, similar to $(l:patterns/spells/hexcasting)certain other patterns/$ I've used in the past.$(br2)\
                Costs about ten $(l:items/amethyst)$(item)Charged Amethyst/$.",
            },
          },
        },
      },
    },
  },
}
